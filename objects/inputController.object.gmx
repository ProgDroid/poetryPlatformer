<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteInputController</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Virtual Controller and Pad setup

event_inherited();

playerUpHeld       = false;
playerDownHeld     = false;
playerLeftHeld     = false;
playerRightHeld    = false;
playerJumpHeld     = false;
playerDashHeld     = false;
playerUpPressed    = false;
playerDownPressed  = false;
playerLeftPressed  = false;
playerRightPressed = false;
playerJumpPressed  = false;
playerDashPressed  = false;
playerDashConfirm  = false;

menuUpHeld         = false;
menuDownHeld       = false;
menuLeftHeld       = false;
menuRightHeld      = false;
menuUpPressed      = false;
menuDownPressed    = false;
menuLeftPressed    = false;
menuRightPressed   = false;
menuAccept         = false;
menuBack           = false;

start              = false;

cameraUp           = false;
cameraDown         = false;
cameraLeft         = false;
cameraRight        = false;

enum inputmethod {
    pad,
    keyboard
}

currentInputType = inputmethod.keyboard;

connectedPads    = ds_list_create();
activePad        = noone;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy list

if (ds_exists(connectedPads, ds_type_list)) {
    ds_list_destroy(connectedPads);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Switch Input type

if (currentInputType == inputmethod.keyboard) {
    var listSize = ds_list_size(connectedPads);

    if (listSize &gt; 0) {
        for (var i = 0; i &lt; listSize; i++) {
            var slot = connectedPads[| i];

            // don't need to use binds from settings here
            // as it doesn't matter what it means to press something
            if (
                gamepad_axis_value(slot, gp_axislh) != 0 ||
                gamepad_axis_value(slot, gp_axislv) != 0 ||
                gamepad_axis_value(slot, gp_axisrh) != 0 ||
                gamepad_axis_value(slot, gp_axisrv) != 0
            ) {
                currentInputType = inputmethod.pad;
                activePad        = slot;
                exit;
            }

            for (var j = gp_face1; j &lt; gp_axislv; j++) {
                if (gamepad_button_check_pressed(slot, j)) {
                    currentInputType = inputmethod.pad;
                    activePad        = slot;
                    exit;
                }
            }
        }
    }
} else if (
    currentInputType == inputmethod.pad &amp;&amp;
    (
        mouse_check_button_pressed(mb_any) ||
        keyboard_check_pressed(vk_anykey)
    )
) {
    currentInputType = inputmethod.keyboard; 
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for input

if (!instance_exists(settingsController)) {
    addConsoleMessage("warning", "settingsController doesn't exist");
    exit;
}

if (!instance_exists(devModeController) || !(devModeController.devConsole)) {
    playerUpHeld       = checkHeld(settingsController.keybinds[? "playerUp"], "less");
    playerDownHeld     = checkHeld(settingsController.keybinds[? "playerDown"], "greater");
    playerLeftHeld     = checkHeld(settingsController.keybinds[? "playerLeft"], "less");
    playerRightHeld    = checkHeld(settingsController.keybinds[? "playerRight"], "greater");
    playerJumpHeld     = checkHeld(settingsController.keybinds[? "jump"], "");
    playerDashHeld     = checkHeld(settingsController.keybinds[? "dash"], "");
    playerUpPressed    = checkPressed(settingsController.keybinds[? "playerUp"], "less");
    playerDownPressed  = checkPressed(settingsController.keybinds[? "playerDown"], "greater");
    playerLeftPressed  = checkPressed(settingsController.keybinds[? "playerLeft"], "less");
    playerRightPressed = checkPressed(settingsController.keybinds[? "playerRight"], "greater");
    playerJumpPressed  = checkPressed(settingsController.keybinds[? "jump"], "");
    playerDashPressed  = checkPressed(settingsController.keybinds[? "dash"], "");
    playerDashConfirm  = checkPressed(settingsController.keybinds[? "dashConfirm"], "");

    cameraUp           = checkHeld(settingsController.keybinds[? "cameraUp"], "less");
    cameraDown         = checkHeld(settingsController.keybinds[? "cameraDown"], "greater");
    cameraLeft         = checkHeld(settingsController.keybinds[? "cameraLeft"], "less");
    cameraRight        = checkHeld(settingsController.keybinds[? "cameraRight"], "greater");
}

// check if in menu?
menuUpHeld       = checkHeld(settingsController.keybinds[? "menuUp"], "less");
menuDownHeld     = checkHeld(settingsController.keybinds[? "menuDown"], "greater");
menuLeftHeld     = checkHeld(settingsController.keybinds[? "menuLeft"], "less");
menuRightHeld    = checkHeld(settingsController.keybinds[? "menuRight"], "greater");
menuUpPressed    = checkPressed(settingsController.keybinds[? "menuUp"], "less");
menuDownPressed  = checkPressed(settingsController.keybinds[? "menuDown"], "greater");
menuLeftPressed  = checkPressed(settingsController.keybinds[? "menuLeft"], "less");
menuRightPressed = checkPressed(settingsController.keybinds[? "menuRight"], "greater");
menuAccept       = checkPressed(settingsController.keybinds[? "accept"], "");
menuBack         = checkPressed(settingsController.keybinds[? "back"], "");

// where should this go?
start            = checkPressed(settingsController.keybinds[? "start"], "");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle Pad (dis)connection

if (!ds_exists(connectedPads, ds_type_list)) {
    addConsoleMessage("warning", "connectedPads list doesn't exist");
    exit;
}

if (!instance_exists(settingsController)) {
    addConsoleMessage("warning", "settingsController doesn't exist");
    exit;
}

if (gamepad_is_supported() &amp;&amp; async_load[? "event_type"] == "gamepad discovered") {
    addConsoleMessage("info", "Gamepad discovered");
    var slot         = async_load[? "pad_index"];
    activePad        = slot;
    currentInputType = inputmethod.pad;
    ds_list_add(connectedPads, slot);
    gamepad_set_axis_deadzone(slot, settingsController.keybinds[? "deadzone"]);
    gamepad_set_button_threshold(slot, settingsController.keybinds[? "buttonThreshold"]);
    exit;
}

if (async_load[? "event_type"] == "gamepad lost") {
    addConsoleMessage("info", "Gamepad lost");
    var slot      = async_load[? "pad_index"];
    var listIndex = ds_list_find_index(connectedPads, slot);

    ds_list_delete(connectedPads, listIndex);

    if (ds_list_size(connectedPads) == 0) {
        activePad        = noone;
        currentInputType = inputmethod.keyboard;
        exit;
    }

    if (activePad == slot) {
        activePad = connectedPads[| 0];
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
