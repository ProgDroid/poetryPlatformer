<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteDevModeController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

devConsole = false;
timeFactorController.previousTimeFactor = timeFactorController.timeFactor;

devTextPosition = display_get_gui_width() * 0.025 * 0.5;

enum consoleCommands {
    type,
    str,
}

rectangleX2    = display_get_gui_width() - 1;
rectangleY2    = display_get_gui_height() * 0.25;

history        = ds_list_create();
historySize    = 0;
maxHistorySize = 1000;

var intro;
intro[consoleCommands.type] = "welcome";
intro[consoleCommands.str]  = "===== HELLO DEV =====";

ds_list_add(history, intro);
historySize += 1;

var intro1;
intro1[consoleCommands.type] = "welcome";
intro1[consoleCommands.str]  = "Type help if you forgot how to use this or you're new (somehow)";

ds_list_add(history, intro1);
historySize += 1;

consoleCommand        = "";
consoleCommandMaxSize = 100;
cursor                = "_";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(history);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor blinking
if (devConsole) {
    if (cursor == "_") {
        cursor = "";
    } else if (cursor == "") {
        cursor = "_";
    }
    
    alarm[0] = room_speed * 0.5 * customDeltaTimeNoTimeFactor;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dev Console Typing

if (devConsole) {
    if (keyboard_check_pressed(vk_anykey)) {
        if (keyboard_lastkey == vk_backspace) {
            consoleCommand = string_delete(consoleCommand, string_length(consoleCommand), 1);
        } else if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('C'))) {
            consoleCommand = "";
        } else if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('D'))) {
            consoleCommand = "";
            toggleDevConsole();
        } else if (keyboard_lastkey == vk_enter) {
            addConsoleMessage("command", consoleCommand);
            consoleCommand = "";
        } else if (string_length(consoleCommand) &lt; consoleCommandMaxSize &amp;&amp;
                   (string_lower(chr(keyboard_lastkey)) == keyboard_lastchar ||
                    chr(keyboard_lastkey) == keyboard_lastchar)
        ) {
            consoleCommand += keyboard_lastchar;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard Controls

if (keyboard_check_pressed(223)) { // pressed `
    toggleDevConsole();
}

if (keyboard_check_pressed(vk_f1)) {
    var newTime = 1;
    if (timeFactorController.timeFactor == 1) {
        newTime = 1.5;
    } else if (timeFactorController.timeFactor == 1.5) {
        newTime = 2;
    } else if (timeFactorController.timeFactor == 2) {
        newTime = 0.5;
    } else if (timeFactorController.timeFactor == 0.5) {
        newTime = 1;
    }

    applyTimeFactor(newTime);
}

if (keyboard_check_pressed(vk_f2)) {
    room_goto_next();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw debug info
if (!devConsole) {
    draw_set_font(-1);
    draw_set_colour(c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_text(devTextPosition, 64, "State: " + objPlayer.state_name);
    draw_text(devTextPosition, 96, "FPS: " + string(fps));
    draw_text(devTextPosition, 128, "Delta Time: " + string(delta_time));
    draw_text(devTextPosition, 160, "Collectibles: " + string(worldController.collectiblesFound));
    draw_text(devTextPosition, 192, "target fps: " + string(global._ts_fps));
    draw_text(devTextPosition, 224, "time factor: " + string(timeFactorController.timeFactor));
    draw_text(devTextPosition, 256, "sprite: " + sprite_get_name(objPlayer.sprite_index));
    draw_text(devTextPosition, 288, "horizontal speed: " + string(objPlayer.horizontalSpeed));
    draw_text(devTextPosition, 320, "facing direction: " + string(objPlayer.facingDir));
    draw_set_colour(c_white);
}

with(objPlatforms) {
    draw_line_colour(
        x + offsetSide * dcos(image_angle + 180) + offsetTop * dcos(image_angle + 90),
        y + offsetSide * -dsin(image_angle + 180) + offsetTop * -dsin(image_angle + 90),
        x + offsetSide * dcos(image_angle) + offsetTop * dcos(image_angle + 90),
        y + offsetSide * -dsin(image_angle) + offsetTop * -dsin(image_angle + 90),
        c_blue, c_blue
    );
}

with(objPlayer) {
    draw_line_colour(x + lengthdir_x(30, floorAngle + 180), y + lengthdir_y(30, floorAngle + 180), x + lengthdir_x(30, floorAngle), y + lengthdir_y(30, floorAngle), c_red, c_red);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dev console

// Draw warnings in red

if (devConsole) 
{
    draw_set_colour(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(0, 0, rectangleX2, rectangleY2, false);
    draw_set_alpha(1);
    draw_rectangle(0, 0, rectangleX2, rectangleY2, true);
    draw_set_colour(c_white);
    
    draw_set_font(-1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);

    var loops = min(historySize, 5);
    for (var i = 0; i &lt; loops; i++) {
        var line = history[| historySize - 1 - i];

        if (line[consoleCommands.type] == "warning") {
            draw_set_colour(c_red);
        }

        draw_text(devTextPosition, rectangleY2 * 0.8 * (0.2 * (5 - i)), line[consoleCommands.str]);

        if (line[consoleCommands.type] == "warning") {
            draw_set_colour(c_white);
        }
    }    
    draw_text(devTextPosition, rectangleY2 * 0.8 * 1.2, "&gt; " + consoleCommand + cursor);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
