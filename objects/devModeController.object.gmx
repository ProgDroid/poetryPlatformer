<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteDevModeController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

show_debug_overlay(true);

devConsole = false;

devTextPosition   = display_get_gui_width() * HEALTH_BAR_POSITION_FACTOR * 0.5;
alarmTextPosition = display_get_gui_width() - (display_get_gui_width() * HEALTH_BAR_POSITION_FACTOR * 0.05) - 500;

enum consoleCommands {
    type,
    str,
}

rectangleX2    = display_get_gui_width() - 1;
rectangleY2    = display_get_gui_height() * 0.25;

history        = ds_list_create();
historySize    = 0;
maxHistorySize = MAX_CONSOLE_HISTORY_SIZE;

var intro;
intro[consoleCommands.type] = "welcome";
intro[consoleCommands.str]  = "===== HELLO DEV =====";

ds_list_add(history, intro);
historySize += 1;

var intro1;
intro1[consoleCommands.type] = "welcome";
intro1[consoleCommands.str]  = "Type help if you forgot how to use this or you're new (somehow)";

ds_list_add(history, intro1);
historySize += 1;

consoleCommand        = "";
consoleCommandMaxSize = MAX_CONSOLE_COMMAND_LENGTH;
cursor                = "_";

window_set_cursor(cr_default);
mouseInstanceId   = noone;
mouseInstanceName = "&lt;undefined&gt;";

drawCustomGui = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(history, ds_type_list)) {
    ds_list_destroy(history);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///cursor blink

if (devModeController.devConsole) {
    if (devModeController.cursor == "_") {
        devModeController.cursor = "";
        alarm[0] = TICK_RATE * 0.5;
        exit;
    }

    devModeController.cursor = "_";
    alarm[0] = TICK_RATE * 0.5;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dev Console Typing

if (devConsole) {
    if (keyboard_check_pressed(vk_anykey)) {
        if (keyboard_lastkey == vk_backspace) {
            consoleCommand = string_delete(consoleCommand, string_length(consoleCommand), 1);
        } else if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('C'))) {
            consoleCommand = "";
        } else if (keyboard_check(vk_control) &amp;&amp; keyboard_check_pressed(ord('D'))) {
            consoleCommand = "";
            toggleDevConsole();
        } else if (keyboard_lastkey == vk_enter) {
            addConsoleMessage("command", consoleCommand);
            consoleCommand = "";
        } else if (string_length(consoleCommand) &lt; consoleCommandMaxSize &amp;&amp;
                   (string_lower(chr(keyboard_lastkey)) == keyboard_lastchar ||
                    chr(keyboard_lastkey) == keyboard_lastchar)
        ) {
            consoleCommand += keyboard_lastchar;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard Controls

if (keyboard_check_pressed(223)) { // pressed `
    toggleDevConsole();
}

if (keyboard_check_pressed(vk_f1)) {
    var newTime = 1;
    if (timeFactorController.timeFactor == 1) {
        newTime = 1.5;
    } else if (timeFactorController.timeFactor == 1.5) {
        newTime = 2;
    } else if (timeFactorController.timeFactor == 2) {
        newTime = 0.5;
    } else if (timeFactorController.timeFactor == 0.5) {
        newTime = 1;
    }

    applyTimeFactor(newTime);
}

if (keyboard_check_pressed(vk_f2)) {
    if (room_next(room) != -1) {
        room_goto_next();
    }
}

if (keyboard_check_pressed(vk_f3)) {
    drawCustomGui = !drawCustomGui;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse pointing
mouseInstanceId = instance_position(mouse_x, mouse_y, all);
if (mouseInstanceId == noone) {
    mouseInstanceName = "&lt;undefined&gt;";
} else {
    mouseInstanceName = object_get_name(mouseInstanceId.object_index);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw debug info
if (drawCustomGui &amp;&amp; !devConsole &amp;&amp; instance_exists(objPlayer)) {
    draw_set_font(-1);
    draw_set_colour(c_red);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_text(devTextPosition, 64, "State: " + objPlayer.state_name);
    draw_text(devTextPosition, 80, "FPS: " + string(fps));
    draw_text(devTextPosition, 96, "Delta Time: " + string(delta_time));
    draw_text(devTextPosition, 112, "Collectibles: " + dec_to_bin(worldController.collectiblesFound));
    draw_text(devTextPosition, 128, "target fps: " + string(global._ts_fps));
    draw_text(devTextPosition, 144, "time factor: " + string(timeFactorController.timeFactor));
    draw_text(devTextPosition, 160, "sprite: " + sprite_get_name(objPlayer.sprite_index));
    draw_text(devTextPosition, 192, "horizontal speed: " + string(objPlayer.horizontalSpeed));
    draw_text(devTextPosition, 208, "facing direction: " + string(objPlayer.facingDir));
    draw_text(devTextPosition, 224, "drawing scale X: " + string(objPlayer.drawingScaleX));
    draw_text(devTextPosition, 240, "drawing scale Y: " + string(objPlayer.drawingScaleY));
    draw_text(devTextPosition, 256, "last dir: " + string(objPlayer.lastDir));
    draw_text(devTextPosition, 272, "double jumps: " + string(objPlayer.doubleJump == doubleJumpScript));
    draw_text(devTextPosition, 288, "input type: " + string(inputController.currentInputType));
    draw_text(devTextPosition, 304, "active pad: " + string(inputController.activePad));
    draw_text(devTextPosition, 320, "connected pads: " + string(ds_list_size(inputController.connectedPads)));
    draw_text(devTextPosition, 336, "dashes: " + string(objPlayer.dashes));
    draw_text(devTextPosition, 352, "maxDashes: " + string(objPlayer.maxDashes));
    draw_text(devTextPosition, 384, "scripts:");
    draw_text(devTextPosition + 20, 400, "facingDirection: " + string(script_get_name(objPlayer.facingDirection)));
    draw_text(devTextPosition + 20, 416, "moveHorizontal: " + string(script_get_name(objPlayer.moveHorizontal)));
    draw_text(devTextPosition + 20, 432, "collectStuff: " + string(script_get_name(objPlayer.collectStuff)));
    draw_text(devTextPosition + 20, 448, "moveVertical: " + string(script_get_name(objPlayer.moveVertical)));
    draw_text(devTextPosition + 20, 464, "slideAlongWalls: " + string(script_get_name(objPlayer.slideAlongWalls)));
    draw_text(devTextPosition + 20, 480, "doubleJump: " + string(script_get_name(objPlayer.doubleJump)));
    draw_text(devTextPosition + 20, 496, "land: " + string(script_get_name(objPlayer.land)));
    draw_text(devTextPosition + 20, 512, "die: " + string(script_get_name(objPlayer.die)));
    draw_text(devTextPosition + 20, 528, "dash: " + string(script_get_name(objPlayer.dash)));
    draw_text(devTextPosition, 544, "pause factor: " + string(timeFactorController.pauseFactor));
    draw_text(devTextPosition, 560, "inputs:");
    draw_text(devTextPosition + 20, 576, "player:");
    draw_text(devTextPosition + 20 + 20, 592, "upHeld: " + string(inputController.playerUpHeld));
    draw_text(devTextPosition + 20 + 20, 608, "downHeld: " + string(inputController.playerDownHeld));
    draw_text(devTextPosition + 20 + 20, 624, "leftHeld: " + string(inputController.playerLeftHeld));
    draw_text(devTextPosition + 20 + 20, 640, "rightHeld: " + string(inputController.playerRightHeld));
    draw_text(devTextPosition + 20 + 20, 656, "jumpHeld: " + string(inputController.playerJumpHeld));
    draw_text(devTextPosition + 20 + 20, 672, "dashHeld: " + string(inputController.playerDashHeld));
    draw_text(devTextPosition + 20 + 20, 688, "upPressed: " + string(inputController.playerUpPressed));
    draw_text(devTextPosition + 20 + 20, 704, "downPressed: " + string(inputController.playerDownPressed));
    draw_text(devTextPosition + 20 + 20, 720, "leftPressed: " + string(inputController.playerLeftPressed));
    draw_text(devTextPosition + 20 + 20, 736, "rightPressed: " + string(inputController.playerRightPressed));
    draw_text(devTextPosition + 20 + 20, 752, "jumpPressed: " + string(inputController.playerJumpPressed));
    draw_text(devTextPosition + 20 + 20, 768, "dashPressed: " + string(inputController.playerDashPressed));
    draw_text(devTextPosition + 20 + 20, 784, "dashConfirm: " + string(inputController.playerDashConfirm));
    draw_text(devTextPosition + 20 + 20, 800, "dashAimUp: " + string(inputController.playerDashAimUp));
    draw_text(devTextPosition + 20 + 20, 816, "dashAimDown: " + string(inputController.playerDashAimDown));
    draw_text(devTextPosition + 20 + 20, 832, "dashAimLeft: " + string(inputController.playerDashAimLeft));
    draw_text(devTextPosition + 20 + 20, 848, "dashAimRight: " + string(inputController.playerDashAimRight));
    draw_text(devTextPosition, 864, "room_speed: " + string(room_speed));

    draw_set_colour(c_white);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dev console

// Draw warnings in red

if (devConsole) {
    draw_set_colour(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(0, 0, rectangleX2, rectangleY2, false);
    draw_set_alpha(1);
    draw_rectangle(0, 0, rectangleX2, rectangleY2, true);
    draw_set_colour(c_white);
    
    draw_set_font(-1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_bottom);

    var loops = min(historySize, MAX_DISPLAYED_CONSOLE_COMMANDS);
    for (var i = 0; i &lt; loops; i++) {
        var line = history[| historySize - 1 - i];

        if (line[consoleCommands.type] == "warning") {
            draw_set_colour(c_red);
        }

        draw_text(devTextPosition, rectangleY2 * 0.8 * (0.2 * (MAX_DISPLAYED_CONSOLE_COMMANDS - i)), line[consoleCommands.str]);

        if (line[consoleCommands.type] == "warning") {
            draw_set_colour(c_white);
        }
    }    
    draw_text(devTextPosition, rectangleY2 * 0.8 * 1.2, "&gt; " + consoleCommand + string(cursor));
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw camera limits

if (drawCustomGui &amp;&amp; !devConsole) {
    var ratio = viewController.cameraLimitsRatio;

    for (var i = 1; i * ratio &lt; 1; i++) {
        draw_line_colour(display_get_gui_width() * i * ratio, display_get_gui_height() * 0.1, display_get_gui_width() * i * ratio, display_get_gui_height() * 9 * 0.1, c_blue, c_blue);
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw instance id and name at mouse point

draw_set_colour(c_green);

draw_text(device_mouse_x_to_gui(0) + 10, device_mouse_y_to_gui(0) - 5, mouseInstanceId);
draw_text(device_mouse_x_to_gui(0) + 10, device_mouse_y_to_gui(0) + 5, mouseInstanceName);

draw_set_colour(c_white);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw alarm debug info

if (drawCustomGui &amp;&amp; !devConsole &amp;&amp; instance_exists(alarmController)) {
    draw_set_font(-1);
    draw_set_colour(c_red);
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);

    for (var i = 0; i &lt; MAX_ALARMS; ++i) {
        var instance    = alarmController.instances[i];
        var objectIndex = noone;
        if (instance_exists(instance)) {
            objectIndex = instance.object_index;
        }

        draw_text(alarmTextPosition, 64 + 16 * i, "alarm " + string(i) + ": " + script_get_name(alarmController.scripts[i]) + "   " + object_get_name(objectIndex) + "   " + string(alarmController.alarmTimes[i]));
    }

    draw_set_colour(c_white);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
