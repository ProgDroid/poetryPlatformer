<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteMenuController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

inputController.inputProcess = menuInput;

menuOptions[MENU_OPTION_COUNT - 1] = "exit";
menuOptions[MENU_OPTION_COUNT - 2] = "set";
menuOptions[MENU_OPTION_COUNT - 3] = "create";
menuOptions[MENU_OPTION_COUNT - 4] = "read";
menuOptions[MENU_OPTION_COUNT - 5] = "select";
menuOptions[MENU_OPTION_COUNT - 6] = "play";

menuActions[MENU_OPTION_COUNT - 1] = menuExit;
menuActions[MENU_OPTION_COUNT - 2] = menuSet;
menuActions[MENU_OPTION_COUNT - 3] = menuCreate;
menuActions[MENU_OPTION_COUNT - 4] = menuRead;
menuActions[MENU_OPTION_COUNT - 5] = menuSelect;
menuActions[MENU_OPTION_COUNT - 6] = menuPlay;

var guiHorizontalCentre = display_get_gui_width() / 2;
var guiHeight           = display_get_gui_height();

for (var i = MENU_OPTION_COUNT; i &gt; 0; --i) {
    optionDimensions[i - 1, 1] = i * guiHeight / (MENU_OPTION_COUNT + 1);
    optionDimensions[i - 1, 0] = guiHorizontalCentre;
    
    menuOptionScale[i - 1, 1] = 1 - ((i - 1 + i) % i) * 0.166;
    menuOptionScale[i - 1, 0] = 1 - ((i - 1 + i) % i) * 0.166;
}

asteriskAlpha        = 1;
asteriskRotation     = 0;
asteriskRotationGoal = 0;
asteriskSize         = 1.25;
currentOption        = 0;
moveBuffer           = 0;

fixed_timestep_register_script(id, selectMenuOption);
fixed_timestep_register_script(id, moveMenuCursor);
fixed_timestep_register_script(id, animateMenu);

draw_set_font(esteban);
draw_set_colour(c_black);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fixed_timestep_unregister(id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(
    platformAsteriskMenu,
    0,
    display_get_gui_width() * 0.5,
    display_get_gui_height() * 0.5,
    asteriskSize,
    asteriskSize,
    asteriskRotation,
    c_black,
    asteriskAlpha
);

for (var i = 0; i &lt; MENU_OPTION_COUNT; ++i) {
    var angle = degtorad(120 - (i * 60) + asteriskRotation);

    if (i == currentOption) {
        draw_set_blend_mode(bm_subtract);
        draw_ellipse_colour(
            (display_get_gui_width() * 0.5) + (cos(angle) * MENU_RADIUS) - 150,
            (display_get_gui_height() * 0.5) + (-sin(angle) * MENU_RADIUS) - 55,
            (display_get_gui_width() * 0.5) + (cos(angle) * MENU_RADIUS) + 150,
            (display_get_gui_height() * 0.5) + (-sin(angle) * MENU_RADIUS) + 90,
            make_colour_rgb(255 - MENU_HIGHLIGHT_R, 255 - MENU_HIGHLIGHT_G, 255 - MENU_HIGHLIGHT_B),
            c_black,
            false
        );
        draw_set_blend_mode(bm_normal);
    }

    draw_text_transformed(
        (display_get_gui_width() * 0.5) + (cos(angle) * (MENU_RADIUS - (1 - menuOptionScale[i, 0]) * 150)),
        (display_get_gui_height() * 0.5) + (-sin(angle) * (MENU_RADIUS - (1 - menuOptionScale[i, 1]) * 150)),
        menuOptions[i],
        menuOptionScale[i, 0],
        menuOptionScale[i, 1],
        0
    );
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
