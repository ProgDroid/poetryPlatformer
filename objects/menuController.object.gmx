<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spriteMenuController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

menus       = loadJson(working_directory + "\menus.json");
resolutions = loadJson(working_directory + "\resolution.json");

currentMenu             = MENU_HANDLE_MAIN;
previousMenus           = ds_stack_create();
currentOption           = 0;
currentBind             = 0;
previousSelectedOptions = ds_stack_create();
nextMenu                = noone;
menuMove                = emptyScript;

var options       = getMenuOptions();
var optionsLength = ds_list_size(options);

var lengths = getMenuLineLengths();

var guiHorizontalCentre = display_get_gui_width() / 2;
var guiHeight           = display_get_gui_height();

for (var i = optionsLength; i &gt; 0; --i) {
    optionDimensions[i - 1, 1] = i * guiHeight / (optionsLength + 1);
    optionDimensions[i - 1, 0] = guiHorizontalCentre;
    
    mainMenuOptionScale[i - 1, 1] = 1 - ((i - 1 + i) % i) * 0.166;
    mainMenuOptionScale[i - 1, 0] = 1 - ((i - 1 + i) % i) * 0.166;
}

menuController.menuGUI = asset_get_index(getMenuDraw());

transitionIn(TRANSITION_HANDLE_IN);

menuAlpha              = -0.2;
previousMenuAlpha      = 1;
asteriskAlpha          = 1;
asteriskRotation       = 0;
asteriskRotationGoal   = 0;
asteriskSize           = ASTERISK_SIZE;
moveBuffer             = 0;
underlineHalfLength    = 0;
underlineHalfLengthMax = lengths[| currentOption];
underlineAnimTime      = 0;
underlineAnimDuration  = UNDERLINE_ANIM_DURATION;
underlineAnimation     = UNDERLINE_ANIMATION_DEFAULT;

fixed_timestep_register_script(id, menuCursorActionScript);
fixed_timestep_register_script(id, moveMenuCursor);
fixed_timestep_register_script(id, animateMenu);

draw_set_font(esteban);
draw_set_colour(c_black);
draw_set_halign(fa_middle);
draw_set_valign(fa_middle);

menuCursorAction     = emptyScript;
menuListAnimTime     = 0;
menuListAnimDuration = MENU_LIST_ANIM_DURATION;
menuListXOffset      = MENU_LIST_X_OFFSET;
menuListXGoal        = MENU_LIST_X_OFFSET;
menuOptionCount      = optionsLength;
offsetFromCentre     = 1;
spinInOffset         = 1;
spinInRotation       = 0;
typingBuffer         = TYPING_BUFFER;
typingProgress       = 1;
typingArray[0]       = "";

keyMap = ds_map_create();

keyMap[? vk_up]        = "up";
keyMap[? gp_padu]      = "dpad up";
keyMap[? gp_axislv]    = "lStickV";
keyMap[? vk_down]      = "down";
keyMap[? gp_padd]      = "dpad down";
keyMap[? vk_left]      = "left";
keyMap[? gp_padl]      = "dpad left";
keyMap[? gp_axislh]    = "lStickH";
keyMap[? vk_right]     = "right";
keyMap[? gp_padr]      = "dpad right";
keyMap[? vk_space]     = "space";
keyMap[? gp_face1]     = "X butt";
keyMap[? vk_shift]     = "shift";
keyMap[? gp_shoulderl] = "L1";
keyMap[? gp_shoulderr] = "R1";
keyMap[? vk_escape]    = "ESC";
keyMap[? gp_start]     = "start";
keyMap[? vk_enter]     = "enter";
keyMap[? gp_face2]     = "O butt";
keyMap[? gp_axisrv]    = "rStickV";
keyMap[? gp_axisrh]    = "rStickH";
keyMap[? ord('R')]     = "r";

enum transitionDirection {
    up   = 0,
    down = 1,
}

menuTransitionDirection = noone;

eventRegister(allEvents.fadeout, id, setMenuFlashSpeed);
eventRegister(allEvents.theend, id, endGame);
eventRegister(allEvents.fadefromwhite, id, scriptStartGame);

menuOn = true;

confirmationHandle = noone;
confirmationText   = "";
confirmationAlpha  = 0;

subMenuSelected     = -1;
subMenuArrowLeft    = false;
subMenuArrowRight   = false;
subMenuInput        = noone;
subMenuInputMove    = emptyScript;
subMenuInputSpeedup = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fixed_timestep_unregister(id);

if (ds_exists(menus, ds_type_map)) {
    ds_map_destroy(menus);
}

if (ds_exists(previousMenus, ds_type_stack)) {
    ds_stack_destroy(previousMenus);
}

if (ds_exists(previousSelectedOptions, ds_type_stack)) {
    ds_stack_destroy(previousSelectedOptions);
}

if (ds_exists(keyMap, ds_type_map)) {
    ds_map_destroy(keyMap);
}

eventUnregister(allEvents.fadeout, id);
eventUnregister(allEvents.theend, id);
eventUnregister(allEvents.fadefromwhite, id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (menuOn) {
    draw_set_alpha(menuController.menuAlpha);

    script_execute(menuGUI);

    draw_set_alpha(1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
