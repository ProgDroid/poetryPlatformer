<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spritePlatformController</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>controller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inheritance and platformMap
event_inherited();

platformMap = ds_map_create();

// letters
ds_map_add(platformMap, "A", objPlatformA);
ds_map_add(platformMap, "B", objPlatformB);
ds_map_add(platformMap, "C", objPlatformC);
ds_map_add(platformMap, "D", objPlatformD);
ds_map_add(platformMap, "E", objPlatformE);
ds_map_add(platformMap, "F", objPlatformF);
ds_map_add(platformMap, "G", objPlatformG);
ds_map_add(platformMap, "H", objPlatformH);
ds_map_add(platformMap, "I", objPlatformI);
ds_map_add(platformMap, "J", objPlatformJ);
ds_map_add(platformMap, "K", objPlatformK);
ds_map_add(platformMap, "L", objPlatformL);
ds_map_add(platformMap, "M", objPlatformM);
ds_map_add(platformMap, "N", objPlatformN);
ds_map_add(platformMap, "O", objPlatformO);
ds_map_add(platformMap, "P", objPlatformP);
ds_map_add(platformMap, "Q", objPlatformQ);
ds_map_add(platformMap, "R", objPlatformR);
ds_map_add(platformMap, "S", objPlatformSLetter);
ds_map_add(platformMap, "T", objPlatformT);
ds_map_add(platformMap, "U", objPlatformU);
ds_map_add(platformMap, "V", objPlatformV);
ds_map_add(platformMap, "W", objPlatformW);
ds_map_add(platformMap, "X", objPlatformX);
ds_map_add(platformMap, "Y", objPlatformY);
ds_map_add(platformMap, "Z", objPlatformZ);

// numbers
ds_map_add(platformMap, "1", objPlatformOne);
ds_map_add(platformMap, "2", objPlatformTwo);
ds_map_add(platformMap, "3", objPlatformThree);
ds_map_add(platformMap, "4", objPlatformFour);
ds_map_add(platformMap, "5", objPlatformFive);
ds_map_add(platformMap, "6", objPlatformSix);
ds_map_add(platformMap, "7", objPlatformSeven);
ds_map_add(platformMap, "8", objPlatformEight);
ds_map_add(platformMap, "9", objPlatformNine);
ds_map_add(platformMap, "0", objPlatformZero);

// special characters
ds_map_add(platformMap, "&amp;", objPlatformAmpersand);
ds_map_add(platformMap, "*", objPlatformAsterisk);
ds_map_add(platformMap, ":", objPlatformColon);
ds_map_add(platformMap, "!", objPlatformExclamation);
ds_map_add(platformMap, "-", objPlatformHyphen);
ds_map_add(platformMap, "(", objPlatformParenthesisLeft);
ds_map_add(platformMap, ")", objPlatformParenthesisRight);
ds_map_add(platformMap, ".", objPlatformPeriod);
ds_map_add(platformMap, "?", objPlatformQuestion);
ds_map_add(platformMap, '"', objPlatformQuoteDouble);
ds_map_add(platformMap, "'", objPlatformQuote);
ds_map_add(platformMap, ",", objPlatformComma);

// dotless i
ds_map_add(platformMap, "dotlessI", objPlatformIDotless);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paddingXMap
event_inherited();

paddingXMap = ds_map_create();

// letters
ds_map_add(paddingXMap, "A", 0);
ds_map_add(paddingXMap, "B", 0);
ds_map_add(paddingXMap, "C", 0);
ds_map_add(paddingXMap, "D", 0);
ds_map_add(paddingXMap, "E", 0);
ds_map_add(paddingXMap, "F", 0);
ds_map_add(paddingXMap, "G", 0);
ds_map_add(paddingXMap, "H", 0);
ds_map_add(paddingXMap, "I", 0);
ds_map_add(paddingXMap, "J", 0);
ds_map_add(paddingXMap, "K", 0);
ds_map_add(paddingXMap, "L", 0);
ds_map_add(paddingXMap, "M", 0);
ds_map_add(paddingXMap, "N", 0);
ds_map_add(paddingXMap, "O", 0);
ds_map_add(paddingXMap, "P", 0);
ds_map_add(paddingXMap, "Q", 0);
ds_map_add(paddingXMap, "R", 0);
ds_map_add(paddingXMap, "S", 0);
ds_map_add(paddingXMap, "T", 0);
ds_map_add(paddingXMap, "U", 0);
ds_map_add(paddingXMap, "V", 0);
ds_map_add(paddingXMap, "W", 0);
ds_map_add(paddingXMap, "X", 0);
ds_map_add(paddingXMap, "Y", 0);
ds_map_add(paddingXMap, "Z", 0);

// numbers
ds_map_add(paddingXMap, "1", 0);
ds_map_add(paddingXMap, "2", 0);
ds_map_add(paddingXMap, "3", 0);
ds_map_add(paddingXMap, "4", 0);
ds_map_add(paddingXMap, "5", 0);
ds_map_add(paddingXMap, "6", 0);
ds_map_add(paddingXMap, "7", 0);
ds_map_add(paddingXMap, "8", 0);
ds_map_add(paddingXMap, "9", 0);
ds_map_add(paddingXMap, "0", 0);

// special characters
ds_map_add(paddingXMap, "&amp;", 0);
ds_map_add(paddingXMap, "*", 0);
ds_map_add(paddingXMap, ":", 0);
ds_map_add(paddingXMap, "!", 0);
ds_map_add(paddingXMap, "-", 0);
ds_map_add(paddingXMap, "(", 0);
ds_map_add(paddingXMap, ")", 0);
ds_map_add(paddingXMap, ".", 0);
ds_map_add(paddingXMap, "?", 0);
ds_map_add(paddingXMap, '"', 0);
ds_map_add(paddingXMap, "'", 0);
ds_map_add(paddingXMap, ",", 0);

// dotless i
ds_map_add(paddingXMap, "dotlessI", 0);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paddingYMap
event_inherited();

paddingYMap = ds_map_create();

// letters
ds_map_add(paddingYMap, "A", 0);
ds_map_add(paddingYMap, "B", 0);
ds_map_add(paddingYMap, "C", 0);
ds_map_add(paddingYMap, "D", 0);
ds_map_add(paddingYMap, "E", 0);
ds_map_add(paddingYMap, "F", 0);
ds_map_add(paddingYMap, "G", 0);
ds_map_add(paddingYMap, "H", 0);
ds_map_add(paddingYMap, "I", 0);
ds_map_add(paddingYMap, "J", 0);
ds_map_add(paddingYMap, "K", 0);
ds_map_add(paddingYMap, "L", 0);
ds_map_add(paddingYMap, "M", 0);
ds_map_add(paddingYMap, "N", 0);
ds_map_add(paddingYMap, "O", 0);
ds_map_add(paddingYMap, "P", 0);
ds_map_add(paddingYMap, "Q", 0);
ds_map_add(paddingYMap, "R", 0);
ds_map_add(paddingYMap, "S", 0);
ds_map_add(paddingYMap, "T", 0);
ds_map_add(paddingYMap, "U", 0);
ds_map_add(paddingYMap, "V", 0);
ds_map_add(paddingYMap, "W", 0);
ds_map_add(paddingYMap, "X", 0);
ds_map_add(paddingYMap, "Y", 0);
ds_map_add(paddingYMap, "Z", 0);

// numbers
ds_map_add(paddingYMap, "1", 0);
ds_map_add(paddingYMap, "2", 0);
ds_map_add(paddingYMap, "3", 0);
ds_map_add(paddingYMap, "4", 0);
ds_map_add(paddingYMap, "5", 0);
ds_map_add(paddingYMap, "6", 0);
ds_map_add(paddingYMap, "7", 0);
ds_map_add(paddingYMap, "8", 0);
ds_map_add(paddingYMap, "9", 0);
ds_map_add(paddingYMap, "0", 0);

// special characters
ds_map_add(paddingYMap, "&amp;", 0);
ds_map_add(paddingYMap, "*", -300);
ds_map_add(paddingYMap, ":", -20);
ds_map_add(paddingYMap, "!", 0);
ds_map_add(paddingYMap, "-", -275);
ds_map_add(paddingYMap, "(", 0);
ds_map_add(paddingYMap, ")", 0);
ds_map_add(paddingYMap, ".", 0);
ds_map_add(paddingYMap, "?", 0);
ds_map_add(paddingYMap, '"', -300);
ds_map_add(paddingYMap, "'", -300);
ds_map_add(paddingYMap, ",", 0);

// dotless i
ds_map_add(paddingYMap, "dotlessI", 0);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platform Words

wordIndex = array_create(0);

enum shadowfx {
    add    = 0,
    remove = 1,
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_exists(platformMap, ds_type_map)) {
    ds_map_destroy(platformMap);
}

if (ds_exists(paddingXMap, ds_type_map)) {
    ds_map_destroy(paddingXMap);
}

if (ds_exists(paddingYMap, ds_type_map)) {
    ds_map_destroy(paddingYMap);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
