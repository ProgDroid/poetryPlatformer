<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playerWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objCharacter</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// State Machine Init
stateMachineInit();
stateCreate("idle", stateIdle);
stateCreate("walk", stateWalk);
stateCreate("drop", stateDrop);
stateCreate("inCollectionAnimation", stateInCollectionAnimation);
stateCreate("respawn", stateRespawn);
stateCreate("gameOver", stateGameOver);
stateCreate("newGame", stateNewGame);
stateCreate("dashStart", stateDash);
stateCreate("dashThrough", stateDashThrough);
stateCreate("dashCancelled", stateDashCancelled);

stateInit("newGame");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///fix timestep
fixed_timestep_register_script(id, stateExecute);
fixed_timestep_register_script(id, stateUpdate);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Properties

// Movement Properties
grav               = 0.35;
horizontalSpeed    = 0;
verticalSpeed      = 0;
maxHorizontalSpeed = MAXHORIZONTALSPEED;
maxVerticalSpeed   = 8;
acceleration       = 0.5;
deceleration       = 0.35;
slideFactor        = 2;
airFrictionFactor  = 3;
airDeceleration    = 0.04;
coyoteTime         = 7;
doubleJumpTime     = 10;
maxDoubleJumps     = MAXDOUBLEJUMPS;
doubleJumps        = maxDoubleJumps;
maxJumpBuffer      = MAXJUMPBUFFER;
jumpBuffer         = 0;
noCoyote           = false;

facingDir = 0;
lastDir   = 0;

maxHp = MAXCOLLECTIBLES;
hp    = 0;

offsetTop     = bbox_top - y;
offsetBottom  = bbox_bottom - y;
offsetLeft    = bbox_left - x;
offsetRight   = bbox_right - x;

sweepDownAngleCheck = 40;
sweepUpAngleCheck   = 60;

image_xscale  = PLAYERSCALE;
image_yscale  = PLAYERSCALE;

drawingScaleX = 1;
drawingScaleY = 1;

maxDashes       = 1;
dashes          = maxDashes;
dashTime        = 5;
dashTimer       = -1;
dashTraceLength = 0;
dashScale       = 0;
dashAngle       = 0;
dashSize        = sprite_get_width(spriteDashTrace);
dashX           = 0;
dashY           = 0;
dashLerp        = LERP_AMOUNT;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controls

downHeld     = false;
leftHeld     = false;
rightHeld    = false;
jumpHeld     = false;
dashHeld     = false;

downPressed  = false;
leftPressed  = false;
rightPressed = false;
jumpPressed  = false;
dashPressed  = false;

dashConfirm  = false;

start        = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Register as observer
eventRegister(allEvents.collectiblefound, id, heal);
eventRegister(allEvents.playerfell, id, processDeath);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inheritance
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Fixed Timestep
fixed_timestep_unregister(id);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Events
eventUnregister(allEvents.collectiblefound, id);
eventUnregister(allEvents.playerfell, id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>viewController.offsetVertically = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///panOut
viewController.panOut = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///maxHorizontalSpeed, image_speed
maxHorizontalSpeed = MAXHORIZONTALSPEED;
image_speed        = IMAGESPEED;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///reset view
view_xview[0] = oldViewX;
view_yview[0] = oldViewY;

flashController.dark     = false;
flashController.active   = true;

stateSwitchPrevious();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

if (!instance_exists(inputController)) {
    addConsoleMessage("warning", program_directory);
    addConsoleMessage("warning", "inputController doesn't exists");
    exit;
}

// rather than changing every instance of these to inputcontroller.*
// will do this even if it's a bit dodgy
// which also lets me have less error checking for inputController existing
downHeld     = inputController.playerDownHeld;
leftHeld     = inputController.playerLeftHeld;
rightHeld    = inputController.playerRightHeld;
jumpHeld     = inputController.playerJumpHeld;
dashHeld     = inputController.playerDashHeld;

downPressed  = inputController.playerDownPressed;
leftPressed  = inputController.playerLeftPressed;
rightPressed = inputController.playerRightPressed;
jumpPressed  = inputController.playerJumpPressed;
dashPressed  = inputController.playerDashPressed;

dashConfirm  = inputController.playerDashConfirm;

start        = inputController.start;

// end game
// move to menuController
if (start) {
    game_end();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dash placement
if (dashTimer &gt; 0 || dashTraceLength &gt; 0) {
    var pointDistance = point_distance(x, y, mouse_x, mouse_y);
    dashScale         = min(pointDistance, max(dashTraceLength, 20)) / dashSize;
    dashAngle         = point_direction(x, y, mouse_x, mouse_y);
    dashX             = x + dashScale * lengthdir_x(dashSize, dashAngle);
    dashY             = y + dashScale * lengthdir_y(dashSize, dashAngle);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite

texture_set_interpolation(true);

if (surface_exists(shadowController.surfaceShadows)) {
    surface_set_target(shadowController.surfaceShadows);

    var xFactor = (x - (room_width / 2)) / room_width;
    var yFactor = y / room_height;

    draw_set_colour(c_black);
    draw_sprite_ext(
        sprite_index, image_index,
        x + 6 * xFactor - view_xview[0],
        y + (1-drawingScaleY) * 20 + 4 * yFactor - view_yview[0],
        image_xscale * drawingScaleX * 0.9, image_yscale * drawingScaleY * 0.9,
        image_angle, image_blend,
        image_alpha
    );
    draw_set_colour(c_white);
    
    surface_reset_target();
}

if (dashTraceLength &gt; 0 &amp;&amp; state_timer &gt; 1) {
    draw_sprite_ext(spriteDashTrace, 0, x, y, dashScale, 1, dashAngle, c_white, 0.7);
    draw_sprite_ext(
        sprite_index,
        image_index,
        dashX,
        dashY,
        dashTraceLength / DASH_TRACE_LENGTH * 0.7,
        dashTraceLength / DASH_TRACE_LENGTH * 0.7,
        0,
        c_white,
        0.5
    );
}

if (state_name == "dashThrough" &amp;&amp; state_timer &gt; 2) {
    draw_sprite_ext(
        sprite_index,
        image_index,
        xprevious,
        yprevious,
        PLAYERSCALE,
        PLAYERSCALE,
        0,
        c_white,
        0.4
    );
}

draw_sprite_ext(
    sprite_index,image_index,
    lerp(xprevious,x,global._ts_render_alpha),
    lerp(yprevious,y + (1-drawingScaleY) * 20,global._ts_render_alpha),
    image_xscale * drawingScaleX,image_yscale * drawingScaleY,
    image_angle,image_blend,
    image_alpha
);

texture_set_interpolation(false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
